info:
  component: center
  instance: ${spring.cloud.client.ip-address}:${server.port}
  os: Linux
  name: ${spring.application.name}
  zone: ${eureka.instance.metadata-map.zone}

# 开发环境配置
server:
  # 服务器的HTTP端口，默认为80
  port: 8080
  servlet:
    context-path: /

# Spring配置
spring:
  # 资源信息
  messages:
    # 国际化资源文件路径
    basename: static/i18n/messages
  jackson:
    time-zone: GMT+8
    # date-format: yyyy-MM-dd HH:mm:ss
    serialization:
      write-dates-as-timestamps: true
  freemarker:
    suffix: .ftl
    content-type: text/html
    charset: UTF-8
    cache: false
    template-loader-path: classpath:/page
  mvc:
    static-path-pattern: /static/**
  resources:
    static-locations: classpath:/static/
# 开启feign的hystrix熔断
feign:
  hystrix:
    enabled: true
ribbon:
  # 连接超时
  ConnectTimeout: 120000
  # 响应超时
  ReadTimeout: 6000
hystrix:
  # 这样将会自动配置一个 Hystrix 并发策略插件的 hook，这个 hook 会将 SecurityContext 从主线程传输到 Hystrix 的命令。
  # 因为 Hystrix 不允许注册多个 Hystrix 策略，所以可以声明 HystrixConcurrencyStrategy
  # 为一个 Spring bean 来实现扩展。Spring Cloud 会在 Spring 的上下文中查找你的实现，并将其包装在自己的插件中。
  shareSecurityContext: true
  command:
    default:
      circuitBreaker:
        # 当在配置时间窗口内达到此数量的失败后，进行短路。默认20个
        requestVolumeThreshold: 10
        # 触发短路的时间值，当该值设为5000时，则当触发 circuit break 后的5000毫秒内都会拒绝request
        # 也就是5000毫秒后才会关闭circuit。默认5000
        sleepWindowInMilliseconds: 5000
      execution:
        isolation:
          thread:
            # 熔断器超时时间，默认：1000/毫秒
            timeoutInMilliseconds: 900000
